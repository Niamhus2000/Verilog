//linear feedback shift register
module lfsr
(
  input wire clk, reset,
  output wire lfsr_out,
  output reg max_tick
);

//signal declaration
reg [17:0] lfsr_reg; // register storage
reg [17:0] lfsr_next; // next value
reg lfsr_tap; // to hold feedback

// body
// register
always @(posedge clk)
if (reset)
  begin
  lfsr_reg <= 18'b111100001111000011; // a seed value
  max_tick <= 1'b0;
  end
else
  begin
  lfsr_reg <= lfsr_next;
  if (lfsr_reg == 18'b111100001111000011)
    max_tick <= 1'b1;
  else
    max_tick <= 1'b0;
end

// next-state logic
always @*
begin
 // generate the feedback by XOR of tap 6 and 9
 lfsr_tap = lfsr_reg[10] ^~ lfsr_reg[17];
 // feedback goes into 0 position. Other bits shift up
 lfsr_next = {lfsr_reg[17:0],lfsr_tap };
end // next state logic

// output logic
assign lfsr_out = lfsr_reg[17];
endmodule

------------------------------------------------------------------------------------------------
module counter
(
  input wire reset, lfsr_out, clk,
  output reg [17:0] count_one,
  output reg [17:0] count_zero
);

always@(posedge clk)
begin
//reset when max_tick goes high
if (reset)
  begin
  count_zero <= 18&#39;b000000000000000000;
  count_one <= 18&#39;b000000000000000000;
  end
else
  begin
  if (lfsr_out == 1'b1)
    count_one = count_one + 1;
  else if (lfsr_out == 1'b0)
    count_zero = count_zero + 1;
  end
end
endmodule

------------------------------------------------------------------------------
module uut(
  input wire clk, reset,
  output wire [17:0] count_zero,
  output wire [17:0] count_one,
  output wire main_lfsr_out,
  output wire main_max_tick
);

//signal
wire lfsr_out, max_tick;

//body
lfsr lfsr_inst(.clk(clk1), .reset(reset1), .lfsr_out(lfsr_out), .max_tick(max_tick));
counter counter_inst(.count_zero(count_zero), .count_one(count_one), .reset(reset2), .lfsr_out(lfsr_out2), .clk(clk));

assign clk1 = clk;
assign reset1 = reset;
assign lfsr_out2 = lfsr_out;
assign reset2 = reset;
assign main_max_tick = max_tick;
assign main_lfsr_out = lfsr_out;

endmodule

--------------------------------------------------------------------------------------------------
`timescale 1ns / 1ps

module lfsr_tb;
// Inputs
reg clk;
reg reset;

// Outputs
wire [17:0] count_zero;
wire [17:0] count_one;
wire main_max_tick;
wire main_lfsr_out;

// Instantiate the Unit Under Test (UUT)
uut uut (
  .clk(clk),
  .reset(reset),
  .count_zero(count_zero),
  .count_one(count_one),
  .main_max_tick(main_max_tick),
  .main_lfsr_out(main_lfsr_out)
);

initial begin
clk = 1'b0;
end

initial begin
reset = 1'b1;
#400;
reset = 1'b0;
#800;
reset = 1'b1;
#200;
reset = 1'b0;
end

always
begin
  #20 clk = ~clk; //negate to oscillate
end
endmodule
